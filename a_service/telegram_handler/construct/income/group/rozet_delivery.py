class Command:
    def execute(self):
        pass

# üîπ Telegram-–∫–æ–º–∞–Ω–¥–∏
class ArrivalCommand(Command):
    def execute(self):
        return "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–±–∞–≤–ª—è—é –Ω–∞ —Å–∫–ª–∞–¥"
                     
class TakeCommand(Command):
    def execute(self):
        return "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤—ñ–¥–Ω—ñ–º–∞—é –∑ —Å–∫–ª–∞–¥–∞"

# üîπ –§–∞–±—Ä–∏–∫–∞ –∫–æ–º–∞–Ω–¥
class CommandFactory:
    TELEGRAM_COMMANDS = {}  #{ "/start": StartCommand  }

    CUSTOM_COMMANDS = {
        "#–≤–∑—è–ª": TakeCommand,
        "#–ø—Ä–∏—Ö—ñ–¥": ArrivalCommand
    }

    @classmethod
    def get_command(cls, text):
        text = text.lower()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram-–∫–æ–º–∞–Ω–¥–∏
        if text in cls.TELEGRAM_COMMANDS:
            return cls.TELEGRAM_COMMANDS[text]()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ (—à—É–∫–∞—î–º–æ –≤ —Ç–µ–∫—Å—Ç—ñ)
        for command, command_class in cls.CUSTOM_COMMANDS.items():
            if command in text:
                return command_class()

        return None

# üîπ –ö–ª–∞—Å, —â–æ –≤–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É
class CommandHandler:
    def handle_command(self, text):
        command = CommandFactory.get_command(text)
        return command.execute() if command else "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"

