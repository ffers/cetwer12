from ..parsers.parse_text import ParseText
from ..parsers.parse_message import ParseMsgFactory

class Command:
    def __init__(self, T: ParseText, M: ParseMsgFactory):
        self.text_p = T()
        self.msg_p = M()

    def execute(self, content, markup):
        pass


# üîπ Telegram-–∫–æ–º–∞–Ω–¥–∏
class MsgCommand(Command):
    def execute(self, content, markup):
        pass
        
    
class ArrivalCommand(Command):
    def execute(self, content, murkup):
        data = self.text_p.parse_colon(content) #–ø–∞—Ä—Å–∏–º 
        print(data)
        #–¥–æ–±–∞–≤–ª—è—î–º –Ω–∞ —Å–∫–ª–∞–¥
        #–≤–æ–∑–≤—Ä–∞—â–∞—î–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–±–∞–≤–ª—è—é –Ω–∞ —Å–∫–ª–∞–¥"
    
class TakeCommand(Command):
    def execute(self):
        #–ø–∞—Ä—Å–∏–º 
        #—É–±–∞–≤–ª—è—î–º –Ω–∞ —Å–∫–ª–∞–¥–µ
        #–≤–æ–∑–≤—Ä–∞—â–∞—î–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤—ñ–¥–Ω—ñ–º–∞—é –∑ —Å–∫–ª–∞–¥–∞"




        return None

# üîπ –ö–ª–∞—Å, —â–æ –≤–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É
class CommandHandler:
    @staticmethod
    def factory(chat_data):
        commands = {
            # "take": "take",
            # "stock": "stock",
            # "edit": "edit",
            "arrival": ArrivalCommand,
            # "comment":"comment"
        } 
        if chat_data.cmd in commands:
            return commands[chat_data.cmd](
                ParseText, ParseMsgFactory
                ).execute(chat_data)
        return f"–ù–µ–º–∞—î –∫–æ–º–∞–Ω–¥–∏ {chat_data.cmd}"
            


