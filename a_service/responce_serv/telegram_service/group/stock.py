from ..parsers.parse_text import ParseText
from ..parsers.parse_message import ParseMsgFactory
from ..parsers.parse_color import TextColorParser

class Command:
    def __init__(self, PT: ParseText, PM: ParseMsgFactory):
        self.text_p = PT()
        self.msg_p = PM()


    def execute(self, chat_data):
        pass
          
class TextParseColor(Command):
    def execute(self, chat_data):
        pointer = TextColorParser().manager_bot(chat_data)
        # result = ProductCounBot().manager_bot(text)
        print(pointer, "ProductCounBot")
        # –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å
        return pointer # –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–æ–º–∞–Ω–¥—É, —á–∞—Ç, –≥–æ—Ç–æ–≤–∏–π –¥—ñ–∫—Ç, —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–∂–ª–∏–≤–æ
    
# üîπ –ö–ª–∞—Å, —â–æ –≤–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É
class CommandHandler:
    @staticmethod
    def factory(chat_data):
        commands = {
            # "take": "take",
            "stock": TextParseColor,
            # "edit": "edit",
            # "arrival": "ArrivalCommand,",
            # "comment":"comment"
        } 
        if chat_data.cmd in commands:
            return commands[chat_data.cmd](
                ParseText, ParseMsgFactory
                ).execute(chat_data)
        return f"–ù–µ–º–∞—î –∫–æ–º–∞–Ω–¥–∏ {chat_data.cmd}"
            


